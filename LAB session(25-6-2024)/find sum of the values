class Solution:
    def fourSum(self, nums, target):
        nums.sort()
        result = []
        self.findNsum(nums, target, 4, [], result)
        return result

    def findNsum(self, nums, target, N, temp, result):
        if len(nums) < N or N < 2 or target < nums[0] * N or target > nums[-1] * N:
            return
        if N == 2:
            l, r = 0, len(nums) - 1
            while l < r:
                s = nums[l] + nums[r]
                if s == target:
                    result.append(temp + [nums[l], nums[r]])
                    while l < r and nums[l] == nums[l + 1]:
                        l += 1
                    while l < r and nums[r] == nums[r - 1]:
                        r -= 1
                    l += 1
                    r -= 1
                elif s < target:
                    l += 1
                else:
                    r -= 1
        else:
            for i in range(len(nums) - N + 1):
                if i == 0 or (i > 0 and nums[i] != nums[i - 1]):
                    self.findNsum(nums[i + 1:], target - nums[i], N - 1, temp + [nums[i]], result)
